def fib(n):
    """
    Returns the nth Fibonacci number (1 → 1, 2 → 1, 3 → 2, ...).
    Uses only loops and integer arithmetic.
    """
    # Handle first two Fibonacci numbers directly
    if n == 1 or n == 2:
        return 1

    # Initialize first two Fibonacci values
    previous = 1  # fib(1)
    current = 1   # fib(2)

    # Compute Fibonacci iteratively from 3 to n
    position = 3
    while position <= n:
        next_fib = previous + current
        previous = current
        current = next_fib
        position += 1

    return current


def factorial(n):
    """
    Returns n! computed via a loop (1! = 1, 2! = 2, ...).
    """
    result = 1
    factor = 2

    # Multiply all integers from 2 up to n
    while factor <= n:
        result *= factor
        factor += 1

    return result


def generate_sequence_table(n):
    """
    Generates a formatted table for i = 1 to n:
        i | fib(i) | i!
    Columns are right-justified to match the widest values.
    Returns an empty string if n < 1.
    """
    if n < 1:
        return ""

    # First pass: determine max widths of string representations
    i = 1
    w_i = 0     # Width for column 'i'
    w_fib = 0   # Width for column 'fib(i)'
    w_fac = 0   # Width for column 'i!'

    while i <= n:
        fib_i = fib(i)
        fac_i = factorial(i)

        # Measure widths of each value as strings
        len_i = len(str(i))
        len_fib = len(str(fib_i))
        len_fac = len(str(fac_i))

        # Update max widths if current values are wider
        if len_i > w_i:
            w_i = len_i
        if len_fib > w_fib:
            w_fib = len_fib
        if len_fac > w_fac:
            w_fac = len_fac

        i += 1

    # Build header using required formatting rule
    header = (
        'i'.rjust(w_i) + " | " +
        'fib(i)'.rjust(w_fib) + " | " +
        'i!'.rjust(w_fac)
    )

    # Build separator line with appropriate width and structure
    separator = (
        "-" * w_i + "-+-" +
        "-" * w_fib + "-+-" +
        "-" * w_fac
    )

    # Second pass: construct all table rows
    i = 1
    rows = ""
    while i <= n:
        fib_i = fib(i)
        fac_i = factorial(i)

        # Build one formatted row
        row = (
            str(i).rjust(w_i) + " | " +
            str(fib_i).rjust(w_fib) + " | " +
            str(fac_i).rjust(w_fac)
        )

        # Append row to result string
        rows += row + "\n"
        i += 1

    # Combine header, separator, and rows
    return header + "\n" + separator + "\n" + rows

